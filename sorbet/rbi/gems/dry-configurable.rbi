# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dry-configurable/all/dry-configurable.rbi
#
# dry-configurable-0.8.3
module Dry
end
module Dry::Configurable
  def clone; end
  def config; end
  def configure; end
  def dup; end
  def finalize!; end
  def initialize(*arg0); end
  def self.extended(base); end
  def self.included(base); end
  include Dry::Core::Constants
end
class Dry::Configurable::Settings
  def add(key, value = nil, options = nil, &block); end
  def config_class; end
  def config_defined?; end
  def create_config; end
  def dup; end
  def each; end
  def empty?; end
  def freeze; end
  def initialize(settings = nil); end
  def name?(name); end
  def names; end
  def self.capture(&block); end
  def settings; end
end
class Dry::Configurable::Settings::ArgumentParser
  def call(val, opts, block); end
  def options(reader: nil); end
end
class Dry::Configurable::Setting
  def initialize(name, value, processor, options = nil); end
  def name; end
  def node?; end
  def options; end
  def processor; end
  def reader?; end
  def undefined?; end
  def value; end
end
class Dry::Configurable::Config
  def [](name); end
  def []=(name, value); end
  def define!(parent_config = nil); end
  def defined?; end
  def dup; end
  def finalize!; end
  def initialize; end
  def key?(name); end
  def raise_unknown_setting_error(name); end
  def self.[](settings); end
  def self.config_defined?; end
  def self.define_accessors!; end
  def set_values!(parent); end
  def to_h; end
  def to_hash; end
  def update(values); end
end
class Dry::Configurable::Settings::DSL
  def initialize; end
  def self.call(&block); end
  def setting(*args, &block); end
end
class Dry::Configurable::Error < StandardError
end
class Dry::Configurable::AlreadyDefinedConfig < Dry::Configurable::Error
end
class Dry::Configurable::FrozenConfig < Dry::Configurable::Error
end
module Dry::Configurable::ClassMethods
  def _settings; end
  def inherited(subclass); end
  def raise_already_defined_config(key); end
  def self.extended(base); end
  def setting(key, value = nil, options = nil, &block); end
  def settings; end
end
